{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, ViewChild } from '@angular/core';\nimport { Driver } from 'src/app/models/Driver';\nlet AddDriverComponent = class AddDriverComponent {\n  constructor(driverservice, activeRoute, router) {\n    this.driverservice = driverservice;\n    this.activeRoute = activeRoute;\n    this.router = router;\n    this.IsNew = true;\n    this.drivers = {\n      id: '',\n      firstName: '',\n      lastName: '',\n      email: '',\n      phoneNumber: ''\n    };\n    this.submitted = false;\n    activeRoute.params.subscribe(params => {\n      this.id = params['id'];\n      if (this.id) {\n        console.log(this.id);\n        this.IsNew = false;\n        this.driverservice.get(this.id).subscribe(a => {\n          console.log(a.result);\n          if (a.isSuccess) {\n            console.log(a.result);\n            this.drivers = a.result || new Driver();\n            this.id = a.result?.id;\n          } else {\n            alert(a.errorMessages);\n          }\n        });\n      }\n      console.log(this.id);\n    });\n  }\n  ngOnInit() {}\n  savedrivers() {\n    console.log(this.DriverForm?.form.value);\n    if (this.DriverForm?.valid) {\n      if (!this.id) {\n        console.log(\"create\");\n        console.log();\n        this.driverservice.create(this.drivers).subscribe(response => {\n          console.log(response);\n          if (response.isSuccess) {\n            this.submitted = true;\n            this.router.navigate(['/drivers']);\n          } else {\n            alert(response.errorMessages);\n          }\n        }, error => {\n          console.log(error);\n        });\n      } else {\n        //update\n        console.log(\"update\");\n        this.driverservice.update(this.id, this.drivers).subscribe(response => {\n          console.log(response);\n          if (response.isSuccess) {\n            this.submitted = true;\n            this.router.navigate(['/drivers']);\n          } else {\n            alert(response.errorMessages);\n          }\n        }, error => {\n          console.log(error);\n        });\n      }\n    } else {\n      console.log(this.DriverForm);\n    }\n  }\n  updatedrivers() {}\n  newdrivers() {\n    this.submitted = false;\n  }\n};\n__decorate([ViewChild('driverForm')], AddDriverComponent.prototype, \"DriverForm\", void 0);\nAddDriverComponent = __decorate([Component({\n  selector: 'app-add-driver',\n  templateUrl: './add-driver.component.html',\n  styleUrls: ['./add-driver.component.scss']\n})], AddDriverComponent);\nexport { AddDriverComponent };","map":{"version":3,"mappings":"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","names":["Component","ViewChild","Driver","AddDriverComponent","constructor","driverservice","activeRoute","router","id","firstName","lastName","email","phoneNumber","params","subscribe","console","log","IsNew","get","a","result","isSuccess","drivers","alert","errorMessages","ngOnInit","savedrivers","DriverForm","form","value","valid","create","response","submitted","navigate","error","update","updatedrivers","newdrivers","__decorate","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["E:\\transflow\\TransfloAssesmentFront\\src\\app\\components\\add-driver\\add-driver.component.ts"],"sourcesContent":["import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { NgForm } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { Driver } from 'src/app/models/Driver';\r\nimport { DriverService } from 'src/app/services/Driver.service';\r\n\r\n@Component({\r\n  selector: 'app-add-driver',\r\n  templateUrl: './add-driver.component.html',\r\n  styleUrls: ['./add-driver.component.scss']\r\n})\r\nexport class AddDriverComponent implements OnInit {\r\n  @ViewChild('driverForm') DriverForm?: NgForm;\r\n  IsNew:boolean=true;\r\n  id:any;\r\n   drivers: Driver = {\r\n      id:'',\r\n     firstName: '',\r\n     lastName: '',\r\n     email: '',\r\n     phoneNumber:''\r\n     };\r\n   submitted = false;\r\n \r\n   constructor(private driverservice: DriverService,private activeRoute: ActivatedRoute,private router:Router) {\r\n     activeRoute.params.subscribe(params => {\r\n    this.id=params['id'];\r\n    if(this.id){\r\n      console.log(this.id);\r\n      \r\n     this.IsNew=false;\r\n    this.driverservice.get(this.id).subscribe(a=>{\r\n      console.log(a.result);\r\n      if(a.isSuccess){\r\n\r\n        console.log(a.result);\r\n\r\n      this.drivers=a.result||new Driver();\r\n      this.id=a.result?.id;\r\n      }else\r\n      {\r\n        alert(a.errorMessages)\r\n      }\r\n    })\r\n    }\r\n    console.log(this.id);\r\n    \r\n     });\r\n    }\r\n \r\n   ngOnInit(): void {\r\n   }\r\n \r\n   savedrivers(): void {\r\n    console.log(this.DriverForm?.form.value);\r\n    \r\n     if(this.DriverForm?.valid){\r\n      if(!this.id){\r\n        console.log(\"create\")\r\n        console.log()\r\n       \r\n\r\n     this.driverservice.create(this.drivers)\r\n       .subscribe(\r\n         response => {\r\n           console.log(response);\r\n           if(response.isSuccess)\r\n           {\r\n            this.submitted = true;\r\n           \r\n            this.router.navigate(['/drivers']);\r\n           }\r\n           else\r\n           {\r\n            alert(response.errorMessages)\r\n           }\r\n    \r\n\r\n         },\r\n         error => {\r\n           console.log(error);\r\n         });\r\n        }else{\r\n          //update\r\n          console.log(\"update\")\r\n          this.driverservice.update(this.id,this.drivers)\r\n          .subscribe(\r\n            response => {\r\n              console.log(response);\r\n              if(response.isSuccess)\r\n              {\r\n              this.submitted = true;\r\n              this.router.navigate(['/drivers']);\r\n              }else\r\n              {\r\n                alert(response.errorMessages)\r\n              }\r\n            },\r\n            error => {\r\n              console.log(error);\r\n            });\r\n        }\r\n        }else{\r\n         console.log(this.DriverForm);\r\n         \r\n       }\r\n   }\r\n   updatedrivers(){}\r\n   newdrivers(): void {\r\n     this.submitted = false;\r\n \r\n   }\r\n \r\n }\r\n \r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}