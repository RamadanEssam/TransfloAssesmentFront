{"ast":null,"code":"import { Driver } from 'src/app/models/Driver';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/Driver.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/forms\";\nconst _c0 = [\"driverForm\"];\nfunction AddDriverComponent_div_2_div_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 19);\n    i0.ɵɵtext(1, \" First Name is Required \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction AddDriverComponent_div_2_div_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 19);\n    i0.ɵɵtext(1, \" Last Name is Required \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction AddDriverComponent_div_2_div_17_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 19);\n    i0.ɵɵtext(1, \" Email is Required \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction AddDriverComponent_div_2_div_22_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 19);\n    i0.ɵɵtext(1, \" Phone Number is Required \");\n    i0.ɵɵelementEnd();\n  }\n}\nconst _c1 = function (a0) {\n  return {\n    \"border-red\": a0\n  };\n};\nfunction AddDriverComponent_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r7 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 3)(1, \"form\", null, 6)(3, \"div\", 7)(4, \"label\", 8);\n    i0.ɵɵtext(5, \"First Name\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"input\", 9);\n    i0.ɵɵlistener(\"ngModelChange\", function AddDriverComponent_div_2_Template_input_ngModelChange_6_listener($event) {\n      i0.ɵɵrestoreView(_r7);\n      const ctx_r6 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r6.drivers.firstName = $event);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(7, AddDriverComponent_div_2_div_7_Template, 2, 0, \"div\", 10);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(8, \"div\", 11)(9, \"label\", 12);\n    i0.ɵɵtext(10, \"Last Name\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(11, \"input\", 13);\n    i0.ɵɵlistener(\"ngModelChange\", function AddDriverComponent_div_2_Template_input_ngModelChange_11_listener($event) {\n      i0.ɵɵrestoreView(_r7);\n      const ctx_r8 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r8.drivers.lastName = $event);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(12, AddDriverComponent_div_2_div_12_Template, 2, 0, \"div\", 10);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(13, \"div\", 11)(14, \"label\", 14);\n    i0.ɵɵtext(15, \"Email\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(16, \"input\", 15);\n    i0.ɵɵlistener(\"ngModelChange\", function AddDriverComponent_div_2_Template_input_ngModelChange_16_listener($event) {\n      i0.ɵɵrestoreView(_r7);\n      const ctx_r9 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r9.drivers.email = $event);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(17, AddDriverComponent_div_2_div_17_Template, 2, 0, \"div\", 10);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(18, \"div\", 11)(19, \"label\", 16);\n    i0.ɵɵtext(20, \"Phone Number\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(21, \"input\", 17);\n    i0.ɵɵlistener(\"ngModelChange\", function AddDriverComponent_div_2_Template_input_ngModelChange_21_listener($event) {\n      i0.ɵɵrestoreView(_r7);\n      const ctx_r10 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r10.drivers.phoneNumber = $event);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(22, AddDriverComponent_div_2_div_22_Template, 2, 0, \"div\", 10);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(23, \"button\", 18);\n    i0.ɵɵlistener(\"click\", function AddDriverComponent_div_2_Template_button_click_23_listener() {\n      i0.ɵɵrestoreView(_r7);\n      const ctx_r11 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r11.savedrivers());\n    });\n    i0.ɵɵtext(24, \"Submit\");\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const _r1 = i0.ɵɵreference(2);\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(6);\n    i0.ɵɵproperty(\"ngModel\", ctx_r0.drivers.firstName)(\"ngClass\", i0.ɵɵpureFunction1(12, _c1, _r1.submitted && (_r1[\"controls\"].firstName.errors == null ? null : _r1[\"controls\"].firstName.errors.required)));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", (_r1[\"controls\"].firstName == null ? null : _r1[\"controls\"].firstName.touched) && (_r1[\"controls\"].firstName.errors == null ? null : _r1[\"controls\"].firstName.errors.required));\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngModel\", ctx_r0.drivers.lastName)(\"ngClass\", i0.ɵɵpureFunction1(14, _c1, _r1.submitted && (_r1[\"controls\"].lastName.errors == null ? null : _r1[\"controls\"].lastName.errors.required)));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", (_r1[\"controls\"].lastName == null ? null : _r1[\"controls\"].lastName.touched) && (_r1[\"controls\"].lastName.errors == null ? null : _r1[\"controls\"].lastName.errors.required));\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngModel\", ctx_r0.drivers.email)(\"ngClass\", i0.ɵɵpureFunction1(16, _c1, _r1.submitted && (_r1[\"controls\"].email.errors == null ? null : _r1[\"controls\"].email.errors.required)));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", (_r1[\"controls\"].email == null ? null : _r1[\"controls\"].email.touched) && (_r1[\"controls\"].email.errors == null ? null : _r1[\"controls\"].email.errors.required));\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngModel\", ctx_r0.drivers.phoneNumber)(\"ngClass\", i0.ɵɵpureFunction1(18, _c1, (_r1 == null ? null : _r1.submitted) && (_r1[\"controls\"].phoneNumber.errors == null ? null : _r1[\"controls\"].phoneNumber.errors.required)));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", (_r1[\"controls\"].phoneNumber == null ? null : _r1[\"controls\"].phoneNumber.touched) && (_r1[\"controls\"].phoneNumber.errors == null ? null : _r1[\"controls\"].phoneNumber.errors.required));\n  }\n}\nexport class AddDriverComponent {\n  constructor(driverservice, activeRoute, router) {\n    this.driverservice = driverservice;\n    this.activeRoute = activeRoute;\n    this.router = router;\n    this.IsNew = true;\n    this.drivers = {\n      id: '',\n      firstName: '',\n      lastName: '',\n      email: '',\n      phoneNumber: ''\n    };\n    this.submitted = false;\n    activeRoute.params.subscribe(params => {\n      this.id = params['id'];\n      if (this.id) {\n        console.log(this.id);\n        this.IsNew = false;\n        this.driverservice.get(this.id).subscribe(a => {\n          console.log(a.result);\n          if (a.isSuccess) {\n            console.log(a.result);\n            this.drivers = a.result || new Driver();\n            this.id = a.result?.id;\n          } else {\n            alert(a.errorMessages);\n          }\n        });\n      }\n      console.log(this.id);\n    });\n  }\n  ngOnInit() {}\n  savedrivers() {\n    console.log(this.DriverForm?.form.value);\n    if (this.DriverForm?.valid) {\n      if (!this.id) {\n        console.log(\"create\");\n        console.log();\n        this.driverservice.create(this.drivers).subscribe(response => {\n          console.log(response);\n          if (response.isSuccess) {\n            this.submitted = true;\n            this.router.navigate(['/drivers']);\n          } else {\n            alert(response.errorMessages);\n          }\n        }, error => {\n          console.log(error);\n        });\n      } else {\n        //update\n        console.log(\"update\");\n        this.driverservice.update(this.id, this.drivers).subscribe(response => {\n          console.log(response);\n          if (response.isSuccess) {\n            this.submitted = true;\n            this.router.navigate(['/drivers']);\n          } else {\n            alert(response.errorMessages);\n          }\n        }, error => {\n          console.log(error);\n        });\n      }\n    } else {\n      console.log(this.DriverForm);\n    }\n  }\n  updatedrivers() {}\n  newdrivers() {\n    this.submitted = false;\n  }\n}\nAddDriverComponent.ɵfac = function AddDriverComponent_Factory(t) {\n  return new (t || AddDriverComponent)(i0.ɵɵdirectiveInject(i1.DriverService), i0.ɵɵdirectiveInject(i2.ActivatedRoute), i0.ɵɵdirectiveInject(i2.Router));\n};\nAddDriverComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: AddDriverComponent,\n  selectors: [[\"app-add-driver\"]],\n  viewQuery: function AddDriverComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.DriverForm = _t.first);\n    }\n  },\n  decls: 8,\n  vars: 1,\n  consts: [[1, \"submit-form\"], [\"class\", \"col\", 4, \"ngIf\"], [1, \"row\"], [1, \"col\"], [\"type\", \"text\", \"placeholder\", \"First name\", \"aria-label\", \"First name\", 1, \"form-control\"], [\"type\", \"text\", \"placeholder\", \"Last name\", \"aria-label\", \"Last name\", 1, \"form-control\"], [\"driverForm\", \"ngForm\"], [1, \"form-group\", \"justify-content-center\", \"mb-4\", \"col\"], [\"for\", \"firstName\", 1, \"form-label\"], [\"id\", \"firstName\", \"required\", \"\", \"name\", \"firstName\", 1, \"form-control\", 3, \"ngModel\", \"ngClass\", \"ngModelChange\"], [\"class\", \"text-danger\", 4, \"ngIf\"], [1, \"form-group\", \"justify-content-center\", \"mb-4\"], [\"for\", \"lastName\"], [\"type\", \"text\", \"id\", \"lastName\", \"required\", \"\", \"name\", \"lastName\", 1, \"form-control\", 3, \"ngModel\", \"ngClass\", \"ngModelChange\"], [\"for\", \"description\"], [\"id\", \"email\", \"required\", \"\", \"name\", \"email\", 1, \"form-control\", 3, \"ngModel\", \"ngClass\", \"ngModelChange\"], [\"for\", \"phoneNumber\"], [\"id\", \"description\", \"required\", \"\", \"name\", \"phoneNumber\", 1, \"form-control\", 3, \"ngModel\", \"ngClass\", \"ngModelChange\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\", 3, \"click\"], [1, \"text-danger\"]],\n  template: function AddDriverComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\")(1, \"div\", 0);\n      i0.ɵɵtemplate(2, AddDriverComponent_div_2_Template, 25, 20, \"div\", 1);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(3, \"div\", 2)(4, \"div\", 3);\n      i0.ɵɵelement(5, \"input\", 4);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(6, \"div\", 3);\n      i0.ɵɵelement(7, \"input\", 5);\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngIf\", !ctx.submitted);\n    }\n  },\n  dependencies: [i3.NgClass, i3.NgIf, i4.ɵNgNoValidate, i4.DefaultValueAccessor, i4.NgControlStatus, i4.NgControlStatusGroup, i4.RequiredValidator, i4.NgModel, i4.NgForm],\n  styles: [\".submit-form[_ngcontent-%COMP%] {\\n  max-width: 400px;\\n  margin: auto;\\n}\\n\\n.border-red[_ngcontent-%COMP%] {\\n  border-color: red;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvY29tcG9uZW50cy9hZGQtZHJpdmVyL2FkZC1kcml2ZXIuY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDSSxnQkFBQTtFQUNBLFlBQUE7QUFDSjs7QUFDRTtFQUNFLGlCQUFBO0FBRUoiLCJzb3VyY2VzQ29udGVudCI6WyIuc3VibWl0LWZvcm0ge1xyXG4gICAgbWF4LXdpZHRoOiA0MDBweDtcclxuICAgIG1hcmdpbjogYXV0bztcclxuICB9XHJcbiAgLmJvcmRlci1yZWR7XHJcbiAgICBib3JkZXItY29sb3I6IHJlZDtcclxuICB9XHJcbiAgIl0sInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"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","names":["Driver","i0","AddDriverComponent","constructor","driverservice","activeRoute","router","id","firstName","lastName","email","phoneNumber","params","subscribe","console","log","IsNew","get","a","result","isSuccess","drivers","alert","errorMessages","ngOnInit","savedrivers","DriverForm","form","value","valid","create","response","submitted","navigate","error","update","updatedrivers","newdrivers","selectors","viewQuery"],"sourceRoot":"","sources":["E:\\transflow\\TransfloAssesmentFront\\src\\app\\components\\add-driver\\add-driver.component.ts","E:\\transflow\\TransfloAssesmentFront\\src\\app\\components\\add-driver\\add-driver.component.html"],"sourcesContent":["import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { NgForm } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { Driver } from 'src/app/models/Driver';\r\nimport { DriverService } from 'src/app/services/Driver.service';\r\n\r\n@Component({\r\n  selector: 'app-add-driver',\r\n  templateUrl: './add-driver.component.html',\r\n  styleUrls: ['./add-driver.component.scss']\r\n})\r\nexport class AddDriverComponent implements OnInit {\r\n  @ViewChild('driverForm') DriverForm?: NgForm;\r\n  IsNew:boolean=true;\r\n  id:any;\r\n   drivers: Driver = {\r\n      id:'',\r\n     firstName: '',\r\n     lastName: '',\r\n     email: '',\r\n     phoneNumber:''\r\n     };\r\n   submitted = false;\r\n \r\n   constructor(private driverservice: DriverService,private activeRoute: ActivatedRoute,private router:Router) {\r\n     activeRoute.params.subscribe(params => {\r\n    this.id=params['id'];\r\n    if(this.id){\r\n      console.log(this.id);\r\n      \r\n     this.IsNew=false;\r\n    this.driverservice.get(this.id).subscribe(a=>{\r\n      console.log(a.result);\r\n      if(a.isSuccess){\r\n\r\n        console.log(a.result);\r\n\r\n      this.drivers=a.result||new Driver();\r\n      this.id=a.result?.id;\r\n      }else\r\n      {\r\n        alert(a.errorMessages)\r\n      }\r\n    })\r\n    }\r\n    console.log(this.id);\r\n    \r\n     });\r\n    }\r\n \r\n   ngOnInit(): void {\r\n   }\r\n \r\n   savedrivers(): void {\r\n    console.log(this.DriverForm?.form.value);\r\n    \r\n     if(this.DriverForm?.valid){\r\n      if(!this.id){\r\n        console.log(\"create\")\r\n        console.log()\r\n       \r\n\r\n     this.driverservice.create(this.drivers)\r\n       .subscribe(\r\n         response => {\r\n           console.log(response);\r\n           if(response.isSuccess)\r\n           {\r\n            this.submitted = true;\r\n           \r\n            this.router.navigate(['/drivers']);\r\n           }\r\n           else\r\n           {\r\n            alert(response.errorMessages)\r\n           }\r\n    \r\n\r\n         },\r\n         error => {\r\n           console.log(error);\r\n         });\r\n        }else{\r\n          //update\r\n          console.log(\"update\")\r\n          this.driverservice.update(this.id,this.drivers)\r\n          .subscribe(\r\n            response => {\r\n              console.log(response);\r\n              if(response.isSuccess)\r\n              {\r\n              this.submitted = true;\r\n              this.router.navigate(['/drivers']);\r\n              }else\r\n              {\r\n                alert(response.errorMessages)\r\n              }\r\n            },\r\n            error => {\r\n              console.log(error);\r\n            });\r\n        }\r\n        }else{\r\n         console.log(this.DriverForm);\r\n         \r\n       }\r\n   }\r\n   updatedrivers(){}\r\n   newdrivers(): void {\r\n     this.submitted = false;\r\n \r\n   }\r\n \r\n }\r\n \r\n","<div>\r\n  <div class=\"submit-form\">\r\n    <div *ngIf=\"!submitted\" class=\"col\">\r\n\r\n      <form #driverForm=\"ngForm\">\r\n        <div class=\"form-group justify-content-center mb-4 col\">\r\n          <label for=\"firstName\" class=\"form-label\">First Name</label>\r\n          <input class=\"form-control\" id=\"firstName\" required [(ngModel)]=\"drivers.firstName\" name=\"firstName\"\r\n            [ngClass]=\"{'border-red': driverForm.submitted&&driverForm['controls'].firstName.errors?.required}\" />\r\n          <div *ngIf=\"driverForm['controls'].firstName?.touched&&driverForm['controls'].firstName.errors?.required\"\r\n            class=\"text-danger\">\r\n            First Name is Required\r\n          </div>\r\n        </div>\r\n        <div class=\"form-group justify-content-center mb-4\">\r\n          <label for=\"lastName\">Last Name</label>\r\n          <input type=\"text\" class=\"form-control\" id=\"lastName\" required [(ngModel)]=\"drivers.lastName\" name=\"lastName\"\r\n            [ngClass]=\"{'border-red': driverForm.submitted&&driverForm['controls'].lastName.errors?.required}\" />\r\n          <div *ngIf=\"driverForm['controls'].lastName?.touched&&driverForm['controls'].lastName.errors?.required\"\r\n            class=\"text-danger\">\r\n            Last Name is Required\r\n          </div>\r\n        </div>\r\n        <div class=\"form-group  justify-content-center mb-4\">\r\n          <label for=\"description\">Email</label>\r\n          <input class=\"form-control\" id=\"email\" required [(ngModel)]=\"drivers.email\" name=\"email\"\r\n            [ngClass]=\"{'border-red': driverForm.submitted&&driverForm['controls'].email.errors?.required}\" />\r\n          <div *ngIf=\"driverForm['controls'].email?.touched&&driverForm['controls'].email.errors?.required\"\r\n            class=\"text-danger\">\r\n            Email is Required\r\n          </div>\r\n        </div>\r\n        <div class=\"form-group  justify-content-center mb-4\">\r\n          <label for=\"phoneNumber\">Phone Number</label>\r\n          <input class=\"form-control\" id=\"description\" required [(ngModel)]=\"drivers.phoneNumber\" name=\"phoneNumber\"\r\n            [ngClass]=\"{'border-red': driverForm?.submitted&&driverForm['controls'].phoneNumber.errors?.required}\" />\r\n          <div *ngIf=\"driverForm['controls'].phoneNumber?.touched&&driverForm['controls'].phoneNumber.errors?.required\"\r\n            class=\"text-danger\">\r\n            Phone Number is Required\r\n          </div>\r\n        </div>\r\n\r\n        <button type=\"submit\" (click)=\"savedrivers()\" class=\"btn btn-primary\">Submit</button>\r\n\r\n      </form>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<div class=\"row\">\r\n  <div class=\"col\">\r\n    <input type=\"text\" class=\"form-control\" placeholder=\"First name\" aria-label=\"First name\">\r\n  </div>\r\n  <div class=\"col\">\r\n    <input type=\"text\" class=\"form-control\" placeholder=\"Last name\" aria-label=\"Last name\">\r\n  </div>\r\n</div>\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}